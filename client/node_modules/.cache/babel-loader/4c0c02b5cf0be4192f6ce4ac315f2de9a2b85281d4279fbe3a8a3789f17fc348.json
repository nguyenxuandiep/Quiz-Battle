{"ast":null,"code":"var _jsxFileName = \"D:\\\\WORKSPACE\\\\DOAN2\\\\Quiz Battle\\\\client\\\\src\\\\pages\\\\Game\\\\HostScreen\\\\HostScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport WaitingRoom from \"../WaitingRoom/WaitingRoom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getGame } from \"../../../actions/game\";\nimport { getQuiz } from \"../../../actions/quiz\";\nimport { getLeaderboard, updateQuestionLeaderboard, updateCurrentLeaderboard } from \"../../../actions/leaderboard\";\nimport styles from \"./hostScreen.module.scss\";\nimport Question from \"../Question/Question\";\nimport classNames from \"classnames/bind\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cx = classNames.bind(styles);\nfunction HostScreen() {\n  _s();\n  const socket = useSelector(state => state.socket.socket);\n  const [isGameStarted, setIsGameStarted] = useState(false);\n  const [isPreviewScreen, setIsPreviewScreen] = useState(false);\n  const [isQuestionScreen, setIsQuestionScreen] = useState(false);\n  const [isQuestionResultScreen, setIsQuestionResultScreen] = useState(false);\n  const [isLeaderboardScreen, setIsLeaderboardScreen] = useState(false);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [timer, setTimer] = useState(0);\n  const [playerList, setPlayerList] = useState([]);\n  const [questionData, setQuestionData] = useState({\n    questionType: \"Quiz\",\n    pointType: \"Standard\",\n    answerTime: 5,\n    backgroundImage: \"\",\n    question: \"\",\n    answerList: [{\n      name: \"a\",\n      body: \"\",\n      isCorrect: false\n    }, {\n      name: \"b\",\n      body: \"\",\n      isCorrect: false\n    }, {\n      name: \"c\",\n      body: \"\",\n      isCorrect: false\n    }, {\n      name: \"d\",\n      body: \"\",\n      isCorrect: false\n    }],\n    questionIndex: 1\n  });\n  const dispatch = useDispatch();\n  const {\n    id\n  } = useParams();\n  const {\n    game\n  } = useSelector(state => state.games);\n  const {\n    quiz\n  } = useSelector(state => state.quiz);\n  const {\n    leaderboard\n  } = useSelector(state => state.leaderboards);\n  const [questionResult, setQuestionResult] = useState(leaderboard === null || leaderboard === void 0 ? void 0 : leaderboard.questionLeaderboard[0]);\n  const [currentLeaderboard, setCurrentLeaderboard] = useState(leaderboard === null || leaderboard === void 0 ? void 0 : leaderboard.currentLeaderboard[0]);\n  useEffect(() => {\n    dispatch(getGame(id));\n  }, [id, dispatch]);\n  useEffect(() => {\n    if (game) {\n      dispatch(getQuiz(game.quizId));\n    }\n  }, [dispatch, game]);\n  useEffect(() => {\n    setTimer(5);\n  }, []);\n  useEffect(() => {\n    socket.on(\"get-answer-from-player\", (data, id, score, player) => {\n      updateLeaderboard(data, id, score);\n      let playerData = {\n        id: data.playerId,\n        userName: player.userName\n      };\n      setPlayerList(prevstate => [...prevstate, playerData]);\n    });\n  }, [socket]);\n  const updateLeaderboard = async (data, id, score) => {\n    let question = await dispatch(updateQuestionLeaderboard(data, id));\n    setQuestionResult(question.questionLeaderboard[data.questionIndex - 1]);\n    let leaderboardData = {\n      questionIndex: data.questionIndex,\n      playerId: data.playerId,\n      playerCurrentScore: score\n    };\n    let leaderboard = await dispatch(updateCurrentLeaderboard(leaderboardData, id));\n    setCurrentLeaderboard(leaderboard.currentLeaderboard[data.questionIndex - 1]);\n  };\n  const startGame = () => {\n    socket.emit(\"start-game\", quiz);\n    socket.emit(\"question-preview\", () => {\n      startPreviewCountdown(5, currentQuestionIndex);\n    });\n    setIsGameStarted(prevstate => !prevstate);\n    setIsPreviewScreen(true);\n  };\n  const startPreviewCountdown = (seconds, index) => {\n    setIsLeaderboardScreen(false);\n    setIsPreviewScreen(true);\n    let time = seconds;\n    let interval = setInterval(() => {\n      setTimer(time);\n      if (time === 0) {\n        clearInterval(interval);\n        displayQuestion(index);\n        setIsPreviewScreen(false);\n        setIsQuestionScreen(true);\n      }\n      time--;\n    }, 1000);\n  };\n  const startQuestionCountdown = (seconds, index) => {\n    let time = seconds;\n    let interval = setInterval(() => {\n      setTimer(time);\n      if (time === 0) {\n        clearInterval(interval);\n        displayQuestionResult(index);\n      }\n      time--;\n    }, 1000);\n  };\n  const displayQuestionResult = index => {\n    setIsQuestionScreen(false);\n    setIsQuestionResultScreen(true);\n    setTimeout(() => {\n      displayCurrentLeaderBoard(index);\n    }, 5000);\n  };\n  const displayCurrentLeaderBoard = index => {\n    setIsQuestionResultScreen(false);\n    setIsLeaderboardScreen(true);\n    setTimeout(() => {\n      socket.emit(\"question-preview\", () => {\n        startPreviewCountdown(5, index);\n        setPlayerList([]);\n      });\n    }, 5000);\n  };\n  const displayQuestion = index => {\n    if (index === quiz.questionList.length) {\n      displayCurrentLeaderBoard(index);\n    } else {\n      setQuestionData(quiz.questionList[index]);\n      setCurrentQuestionIndex(prevstate => prevstate + 1);\n      let time = quiz.questionList[index].answerTime;\n      let question = {\n        answerList: quiz.questionList[index].answerList,\n        questionIndex: quiz.questionList[index].questionIndex,\n        correctAnswersCount: quiz.questionList[index].answerList.filter(answer => answer.isCorrect === true).length\n      };\n      socket.emit(\"start-question-timer\", time, question, () => {\n        startQuestionCountdown(time, index + 1);\n      });\n    }\n  };\n  console.log(playerList);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: cx('page'),\n    children: [!isGameStarted && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: cx('lobby'),\n      children: [/*#__PURE__*/_jsxDEV(WaitingRoom, {\n        pin: game === null || game === void 0 ? void 0 : game.pin,\n        socket: socket\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startGame,\n        children: \"Start a game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }, this), isPreviewScreen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: cx(\"question-preview\"),\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: timer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }, this), isQuestionScreen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: cx(\"question-preview\"),\n      children: /*#__PURE__*/_jsxDEV(Question, {\n        question: questionData,\n        timer: timer,\n        host: true\n      }, questionData.questionIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 9\n    }, this), isQuestionResultScreen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: cx(\"question-preview\"),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: cx(\"leaderboard\"),\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: cx(\"leaderboard-title\"),\n          children: \"Question result\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n          children: questionResult.questionResultList.map(player => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [playerList.filter(x => x.id === player.playerId).map(x => /*#__PURE__*/_jsxDEV(\"mark\", {\n              children: x.userName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 23\n            }, this)), /*#__PURE__*/_jsxDEV(\"small\", {\n              children: player.playerPoints\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 9\n    }, this), isLeaderboardScreen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: cx(\"question-preview\"),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: cx(\"leaderboard\"),\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: cx(\"leaderboard-title\"),\n          children: \"Leaderboard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n          children: currentLeaderboard.leaderboardList.map(player => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [playerList.filter(x => x.id === player.playerId).map(x => /*#__PURE__*/_jsxDEV(\"mark\", {\n              children: x.userName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 23\n            }, this)), /*#__PURE__*/_jsxDEV(\"small\", {\n              children: player.playerCurrentScore\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 5\n  }, this);\n}\n_s(HostScreen, \"WEO8/zWjeQzla3hkK+xb/UWk+74=\", false, function () {\n  return [useSelector, useDispatch, useParams, useSelector, useSelector, useSelector];\n});\n_c = HostScreen;\nexport default HostScreen;\nvar _c;\n$RefreshReg$(_c, \"HostScreen\");","map":{"version":3,"names":["React","useState","useEffect","useParams","WaitingRoom","useDispatch","useSelector","getGame","getQuiz","getLeaderboard","updateQuestionLeaderboard","updateCurrentLeaderboard","styles","Question","classNames","jsxDEV","_jsxDEV","cx","bind","HostScreen","_s","socket","state","isGameStarted","setIsGameStarted","isPreviewScreen","setIsPreviewScreen","isQuestionScreen","setIsQuestionScreen","isQuestionResultScreen","setIsQuestionResultScreen","isLeaderboardScreen","setIsLeaderboardScreen","currentQuestionIndex","setCurrentQuestionIndex","timer","setTimer","playerList","setPlayerList","questionData","setQuestionData","questionType","pointType","answerTime","backgroundImage","question","answerList","name","body","isCorrect","questionIndex","dispatch","id","game","games","quiz","leaderboard","leaderboards","questionResult","setQuestionResult","questionLeaderboard","currentLeaderboard","setCurrentLeaderboard","quizId","on","data","score","player","updateLeaderboard","playerData","playerId","userName","prevstate","leaderboardData","playerCurrentScore","startGame","emit","startPreviewCountdown","seconds","index","time","interval","setInterval","clearInterval","displayQuestion","startQuestionCountdown","displayQuestionResult","setTimeout","displayCurrentLeaderBoard","questionList","length","correctAnswersCount","filter","answer","console","log","className","children","pin","fileName","_jsxFileName","lineNumber","columnNumber","onClick","host","questionResultList","map","x","playerPoints","leaderboardList","_c","$RefreshReg$"],"sources":["D:/WORKSPACE/DOAN2/Quiz Battle/client/src/pages/Game/HostScreen/HostScreen.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\"\r\nimport { useParams } from \"react-router-dom\"\r\nimport WaitingRoom from \"../WaitingRoom/WaitingRoom\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { getGame } from \"../../../actions/game\"\r\nimport { getQuiz } from \"../../../actions/quiz\"\r\nimport {\r\n  getLeaderboard,\r\n  updateQuestionLeaderboard,\r\n  updateCurrentLeaderboard,\r\n} from \"../../../actions/leaderboard\"\r\nimport styles from \"./hostScreen.module.scss\"\r\nimport Question from \"../Question/Question\"\r\nimport classNames from \"classnames/bind\"\r\n\r\n\r\nconst cx = classNames.bind(styles);\r\nfunction HostScreen() {\r\n  const socket = useSelector((state) => state.socket.socket)\r\n  const [isGameStarted, setIsGameStarted] = useState(false)\r\n  const [isPreviewScreen, setIsPreviewScreen] = useState(false)\r\n  const [isQuestionScreen, setIsQuestionScreen] = useState(false)\r\n  const [isQuestionResultScreen, setIsQuestionResultScreen] = useState(false)\r\n  const [isLeaderboardScreen, setIsLeaderboardScreen] = useState(false)\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0)\r\n  const [timer, setTimer] = useState(0)\r\n  const [playerList, setPlayerList] = useState([])\r\n  const [questionData, setQuestionData] = useState({\r\n    questionType: \"Quiz\",\r\n    pointType: \"Standard\",\r\n    answerTime: 5,\r\n    backgroundImage: \"\",\r\n    question: \"\",\r\n    answerList: [\r\n      { name: \"a\", body: \"\", isCorrect: false },\r\n      { name: \"b\", body: \"\", isCorrect: false },\r\n      { name: \"c\", body: \"\", isCorrect: false },\r\n      { name: \"d\", body: \"\", isCorrect: false },\r\n    ],\r\n    questionIndex: 1,\r\n  })\r\n  const dispatch = useDispatch()\r\n  const { id } = useParams()\r\n  const { game } = useSelector((state) => state.games)\r\n  const { quiz } = useSelector((state) => state.quiz)\r\n  const { leaderboard } = useSelector((state) => state.leaderboards)\r\n  const [questionResult, setQuestionResult] = useState(\r\n    leaderboard?.questionLeaderboard[0]\r\n  )\r\n  const [currentLeaderboard, setCurrentLeaderboard] = useState(\r\n    leaderboard?.currentLeaderboard[0]\r\n  )\r\n\r\n  useEffect(() => {\r\n    dispatch(getGame(id))\r\n  }, [id, dispatch])\r\n\r\n  useEffect(() => {\r\n    if (game) {\r\n      dispatch(getQuiz(game.quizId))\r\n    }\r\n  }, [dispatch, game])\r\n\r\n  useEffect(() => {\r\n    setTimer(5)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    socket.on(\"get-answer-from-player\", (data, id, score, player) => {\r\n      updateLeaderboard(data, id, score)\r\n      let playerData = { id: data.playerId, userName: player.userName }\r\n      setPlayerList((prevstate) => [...prevstate, playerData])\r\n    })\r\n  }, [socket])\r\n\r\n  const updateLeaderboard = async (data, id, score) => {\r\n    let question = await dispatch(updateQuestionLeaderboard(data, id))\r\n    setQuestionResult(question.questionLeaderboard[data.questionIndex - 1])\r\n    let leaderboardData = {\r\n      questionIndex: data.questionIndex,\r\n      playerId: data.playerId,\r\n      playerCurrentScore: score,\r\n    }\r\n    let leaderboard = await dispatch(\r\n      updateCurrentLeaderboard(leaderboardData, id)\r\n    )\r\n    setCurrentLeaderboard(\r\n      leaderboard.currentLeaderboard[data.questionIndex - 1]\r\n    )\r\n  }\r\n\r\n  const startGame = () => {\r\n    socket.emit(\"start-game\", quiz)\r\n    socket.emit(\"question-preview\", () => {\r\n      startPreviewCountdown(5, currentQuestionIndex)\r\n    })\r\n    setIsGameStarted((prevstate) => !prevstate)\r\n    setIsPreviewScreen(true)\r\n  }\r\n\r\n  const startPreviewCountdown = (seconds, index) => {\r\n    setIsLeaderboardScreen(false)\r\n    setIsPreviewScreen(true)\r\n    let time = seconds\r\n    let interval = setInterval(() => {\r\n      setTimer(time)\r\n      if (time === 0) {\r\n        clearInterval(interval)\r\n        displayQuestion(index)\r\n        setIsPreviewScreen(false)\r\n        setIsQuestionScreen(true)\r\n      }\r\n      time--\r\n    }, 1000)\r\n  }\r\n\r\n  const startQuestionCountdown = (seconds, index) => {\r\n    let time = seconds\r\n    let interval = setInterval(() => {\r\n      setTimer(time)\r\n      if (time === 0) {\r\n        clearInterval(interval)\r\n        displayQuestionResult(index)\r\n      }\r\n      time--\r\n    }, 1000)\r\n  }\r\n  const displayQuestionResult = (index) => {\r\n    setIsQuestionScreen(false)\r\n    setIsQuestionResultScreen(true)\r\n    setTimeout(() => {\r\n      displayCurrentLeaderBoard(index)\r\n    }, 5000)\r\n  }\r\n\r\n  const displayCurrentLeaderBoard = (index) => {\r\n    setIsQuestionResultScreen(false)\r\n    setIsLeaderboardScreen(true)\r\n    setTimeout(() => {\r\n      socket.emit(\"question-preview\", () => {\r\n        startPreviewCountdown(5, index)\r\n        setPlayerList([])\r\n      })\r\n    }, 5000)\r\n  }\r\n\r\n  const displayQuestion = (index) => {\r\n    if (index === quiz.questionList.length) {\r\n      displayCurrentLeaderBoard(index)\r\n    } else {\r\n      setQuestionData(quiz.questionList[index])\r\n      setCurrentQuestionIndex((prevstate) => prevstate + 1)\r\n      let time = quiz.questionList[index].answerTime\r\n      let question = {\r\n        answerList: quiz.questionList[index].answerList,\r\n        questionIndex: quiz.questionList[index].questionIndex,\r\n        correctAnswersCount: quiz.questionList[index].answerList.filter(\r\n          (answer) => answer.isCorrect === true\r\n        ).length,\r\n      }\r\n      socket.emit(\"start-question-timer\", time, question, () => {\r\n        startQuestionCountdown(time, index + 1)\r\n      })\r\n    }\r\n  }\r\n  console.log(playerList)\r\n  return (\r\n    <div className={cx('page')}>\r\n      {!isGameStarted && (\r\n        <div className={cx('lobby')}>\r\n          <WaitingRoom pin={game?.pin} socket={socket} />\r\n          <button onClick={startGame}>Start a game\r\n          </button>\r\n        </div>\r\n      )}\r\n\r\n      {isPreviewScreen && (\r\n        <div className={cx(\"question-preview\")}>\r\n          <h1>{timer}</h1>\r\n        </div>\r\n      )}\r\n      {isQuestionScreen && (\r\n        <div className={cx(\"question-preview\")}>\r\n          <Question\r\n            key={questionData.questionIndex}\r\n            question={questionData}\r\n            timer={timer}\r\n            host={true}\r\n          />\r\n        </div>\r\n      )}\r\n      {isQuestionResultScreen && (\r\n        <div className={cx(\"question-preview\")}>\r\n          <div className={cx(\"leaderboard\")}>\r\n            <h1 className={cx(\"leaderboard-title\")}>Question result\r\n            </h1>\r\n            <ol>\r\n              {questionResult.questionResultList.map((player) => (\r\n                <li>\r\n                  {playerList\r\n                    .filter((x) => x.id === player.playerId)\r\n                    .map((x) => (\r\n                      <mark>{x.userName}</mark>\r\n                    ))}\r\n                  <small>{player.playerPoints}</small>\r\n                </li>\r\n              ))}\r\n            </ol>\r\n          </div>\r\n        </div>\r\n      )}\r\n      {isLeaderboardScreen && (\r\n        <div className={cx(\"question-preview\")}>\r\n          <div className={cx(\"leaderboard\")}>\r\n            <h1 className={cx(\"leaderboard-title\")}>Leaderboard</h1>\r\n            <ol>\r\n              {currentLeaderboard.leaderboardList.map((player) => (\r\n                <li>\r\n                  {playerList\r\n                    .filter((x) => x.id === player.playerId)\r\n                    .map((x) => (\r\n                      <mark>{x.userName}</mark>\r\n                    ))}\r\n                  <small>{player.playerCurrentScore}</small>\r\n                </li>\r\n              ))}\r\n            </ol>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default HostScreen\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}